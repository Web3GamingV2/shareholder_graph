type AllowedRecipientsUpdated @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  minter: Bytes!
  isAllowed: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Burn @entity(immutable: true) {
  id: Bytes!
  burnAmount: BigInt!
  totalSupplyAfter: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractUpgraded @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  newContract: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintCapNumeratorChanged @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  previousMintCapNumerator: BigInt!
  mintCapNumerator: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintPerformed @entity(immutable: true) {
  id: Bytes!
  recipient: Bytes!
  amount: BigInt!
  newTotalSupply: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MultiSigWalletAdressChanged @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  oldAddr: Bytes!
  newAddr: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedemptionPoolChanged @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  oldPool: Bytes!
  newPool: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PatUpgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PurchaseConfirmEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  usdtAmount: BigInt!
  patAmount: BigInt!
  vestingWallet: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryRatioUpdateEvent @entity(immutable: true) {
  id: Bytes!
  oldRatio: BigInt!
  newRatio: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SaleStateUpdateEvent @entity(immutable: true) {
  id: Bytes!
  isActive: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensReleasedEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  vestingWallet: Bytes!
  releasedAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedemptionRequestEvent @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes!
  user: Bytes!
  patAmount: BigInt!
  usdtAmount: BigInt!
  purchaseIndex: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedemptionCompleteEvent @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes!
  user: Bytes!
  patAmount: BigInt!
  usdtAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedemptionCancelEvent @entity(immutable: true) {
  id: Bytes!
  requestId: Bytes!
  user: Bytes!
  patAmount: BigInt!
  usdtAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubscriptionRequestEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  subscriptionId: BigInt!
  patAmount: BigInt!
  usdtAmount: BigInt!
  expiryTimestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}